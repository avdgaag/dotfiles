global !p
import re
import os

def described_class_from_filename(filename):
	return camelize(re.sub('_spec', '', filename))

def camelize(str):
	return os.path.splitext(''.join([part.capitalize() for part in str.lower().split('_')]))[0]
endglobal

snippet T "Transform" b
Transform(/^${1:pattern}$/) do |${2:str}|
	$0
end
endsnippet

snippet W "When" b
When(/^${1:I perform some kind of action}$/) do${2: |${3:arg, ...}|}
	$0
end
endsnippet

snippet T "Then" b
Given(/^${1:I observe a change in the world}$/) do${2: |${3:arg, ...}|}
	$0
end
endsnippet

snippet G "Given" b
Given(/^${1:a certain state of the world}$/) do${2: |${3:arg, ...}|}
	$0
end
endsnippet

snippet isbl "it_should_behave_like ..." b
it_should_behave_like '${1:shared examples}'$0
endsnippet

snippet fi "fill_in ..., with: ..." b
fill_in '${1:Field}', with: ${2:'${3:Value}'}
endsnippet

snippet sel "select ..., from: ..." b
select '${1:Value}', from: '${2:Field}'
endsnippet

snippet wi "within ... do end" b
within ${1:'${2:selector}'} do
	$0
end
endsnippet

snippet arx "and_raise" w
and_raise(${1:exception})
endsnippet

snippet Ar "and_return_block" w
and_return { $1 }
endsnippet

snippet ar "and_return_value" w
and_return(${1:value})
endsnippet

snippet ay "and_yield" w
and_yield(${1:values})
endsnippet

snippet atn "any_number_of_times" w
any_number_of_times
endsnippet

snippet atl "at_least" w
at_least(${1:n}).times
endsnippet

snippet atm "at_most" w
at_most(${1:n}).times
endsnippet

snippet con "context"
context '${1:context}' do
	$0
end
endsnippet

snippet des "Describe"
describe '${1:subject}' do
	$0
end
endsnippet

snippet dest "Describe_type"
describe ${1:`!p snip.rv = described_class_from_filename(fn) or 'MyClass'`} do
	$0
end
endsnippet

snippet desr "Describe routing"
describe ${1:Articles}Controller do
	describe 'routing' do
		$0
	end
end
endsnippet

snippet desc "describe simple controller action"
describe '${1:GET} ${2:action}' do
	before { ${1/\w+/\L$0/} :$2, ${3:id: '1'} }

	it 'responds with success' do
		expect(response).to be_success
	end

	it 'renders the $2 template' do
		expect(response).to render_template('$2')
	end

	it 'does not set the flash' do
		expect(flash[:notice]).to be_nil
	end

	it 'assigns to @${7:ivar}' do
		expect(assigns(:$7)).to_not be_nil
	end
end
endsnippet

snippet atx "exactly" w
exactly(${1:n}).times
endsnippet

snippet its "its attribute should"
its(:${1:attribute}) { should $0 }
endsnippet

snippet it[ "its key"
its([:${1:key}]) { should $0 }
endsnippet

snippet it "It"
it '${1:does something}' do
	$0
end
endsnippet

snippet itv "It visits a page"
it '${1:does something}' do
	visit "${2:/some/url}"
	$0
end
endsnippet

snippet itr "It expects routing"
it { expect(${1:get}: '${2:/some/url}').to route_to('${3:controller}#${4:action}'${5:, id: '${6:1}'}) }
endsnippet

snippet itp "It expects path"
it { expect(${1:article_path(1)}).to eql('${2:/articles/1}') }
endsnippet

snippet It "It single line"
it { $0 }
endsnippet

snippet mat "Matcher (DSL)"
RSpec::Matchers.define :${1:name} do |${2:expected}|
	match do |${3:actual}|
		$3.$1?($2)
	end

	failure_message_for_should do |$3|
		"Expected $3 to ${1/_/ /g} $2"
	end

	failure_message_for_should_not do |$3|
		"Expected $3 not to ${1/_/ /g} $2"
	end
end

endsnippet

snippet db "double"
double('${1:double_name}'${2:, null_object: true})
endsnippet

snippet mm "mock_model"
mock_model(${1:model})$0
endsnippet

snippet on "once" w
once
endsnippet

snippet reqs "Require spec_helper"
require 'spec_helper'

endsnippet

snippet bef "setup"
before${1:(${2::each})} do
	$0
end
endsnippet

snippet Bef "before {}"
before { $0 }
endsnippet

snippet aft "teardown"
after${1:(${2::each})} do
	$0
end
endsnippet

snippet Aft "after {}"
after { $0 }
endsnippet

snippet tw "twice" w
twice
endsnippet

snippet let "let"
let(:${1:symbol}) { $2 }
endsnippet

snippet let! "let! {}"
let!(:${1:symbol}) { $2 }
endsnippet

snippet letb! "let block"
let!(:${1:symbol}) do
	$0
end
endsnippet

snippet letb "let block"
let(:${1:symbol}) do
	$0
end
endsnippet

snippet subj "subject"
subject${1:(:${2:name})} { $3 }
endsnippet

snippet exp "expect to" w
expect(${1:subject}).to $0
endsnippet

snippet expn "expect not to" w
expect(${1:subject}).not_to $0
endsnippet

snippet expb "expect to be" w
expect(${1:subject}).to be_$0
endsnippet

snippet expnb "expect not to be" w
expect(${1:subject}).not_to be_$0
endsnippet

snippet expe "expect to equal" w
expect(${1:subject}).to eql($2)
endsnippet

snippet expne "expect not to equal" w
expect(${1:subject}).not_to eql($2)
endsnippet

snippet expi "expect to include" w
expect(${1:subject}).to include($2)
endsnippet

snippet expni "expect not to include" w
expect(${1:subject}).not_to include($2)
endsnippet

snippet exprt "expect to render template" w
expect(response).to render_template('${1:new}')
endsnippet

snippet exprd "expect to redirect" w
expect(response).to redirect_to('${1:url}')
endsnippet

snippet expa "expect assigns to " w
expect(assigns(:${1:name})).to $0
endsnippet

snippet expf "expect flash to" w
expect(flash[:${1:name}]).to $0
endsnippet

snippet exphc "expect to have content" w
expect(page).to have_content('${1:content}')
endsnippet

snippet exphcss "expect to have css" w
expect(page).to have_css('${1:selector}'${2:, text: '${3:text}'})
endsnippet

snippet exphe "expect to have elements" w
expect(${1:subject}).to have(${2:3}).${3:elements}
endsnippet

snippet Exp "expect to block"
expect {
	$1
}.to $0
endsnippet

snippet expr "expect to raise error"
expect {
	$1
}.to raise_error(${2:error})
endsnippet

snippet expc "expect to change"
expect {
	$1
}.to change { ${2:subject} }${4:.by(${5:1})}
endsnippet

snippet fc "FactoryGirl create"
create :${1:factory_name}$0
endsnippet

snippet fb "FactoryGirl build"
build :${1:factory_name}$0
endsnippet

snippet fbs "FactoryGirl build_stubbed"
build_stubbed :${1:factory_name}$0
endsnippet

snippet fcl "FactoryGirl create list"
create_list :${1:factory_name}, ${2:2}$0
endsnippet

snippet fbl "FactoryGirl build list"
build_list :${1:factory_name}, ${2:2}$0
endsnippet

snippet fbsl "FactoryGirl build_stubbed list"
build_stubbed_list :${1:factory_name}, ${2:2}$0
endsnippet

snippet allow "allow to receive"
allow(${1:object}).to receive(:${2:message})${3:.with(${4:argument})}${5:.and_return(${6:value})}
endsnippet

snippet expre "expect to receive"
expect(${1:object}).to receive(:${2:message})${3:.with(${4:argument})}${5:.and_return(${6:value})}
endsnippet

snippet exphr "expect to have received"
expect(${1:object}).to have_received(:${2:message})${3:.with(${4:argument})}
endsnippet

# vim:ft=snippets:
