extends ruby

snippet arx "and_raise" w
and_raise(${1:exception})
endsnippet

snippet Ar "and_return_block" w
and_return { $1 }
endsnippet

snippet ar "and_return_value" w
and_return(${1:value})
endsnippet

snippet ay "and_yield" w
and_yield(${1:values})
endsnippet

snippet atn "any_number_of_times" w
any_number_of_times
endsnippet

snippet atl "at_least" w
at_least(${1:n}).times
endsnippet

snippet atm "at_most" w
at_most(${1:n}).times
endsnippet

snippet con "context"
context "${1:context}" do
  $0
end
endsnippet

snippet des "Describe"
describe "${1:subject}" do
  $0
end
endsnippet

snippet dest "Describe_type"
describe ${1:Type} do
  $0
end
endsnippet

snippet desc "describe controller action"
describe "${1:GET} ${2:action}" do
  before { ${1/\w+/\L$0/} :$2, ${3:id: '1'} }
  it { should respond_with(${4:success}) }
  it { should render_template('${5:$2}') }
  it { should${6:_not} set_the_flash }
  it { should assign_to(:${7:ivar}) }
end
endsnippet

snippet atx "exactly" w
exactly(${1:n}).times
endsnippet

snippet its "its attribute should"
its(:${1:attribute}) { should $0 }
endsnippet

snippet it[ "its key"
its([:${1:key}]) { should $0 }
endsnippet

snippet it "It"
it "${1:does something}" do
  $0
end
endsnippet

snippet itv "It visits a page"
it "${1:does something}" do
  visit "${2:/some/url}"
  $0
end
endsnippet

snippet itr "It expects routing"
it { expect(${1:get}: '${2:/some/url}').to route_to('${3:controller}#${4:action}'${5:, id: '${6:1}'}) }
$0
endsnippet

snippet It "It single line"
it { $0 }
endsnippet

snippet mat "Matcher (DSL)"
RSpec::Matchers.define :${1:name} do |${2:expected}|
  match do |${3:actual}|
    $3.$1?($2)
  end

  failure_message_for_should do |$3|
    "Expected $3 to ${1/_/ /g} $2"
  end

  failure_message_for_should_not do |$3|
    "Expected $3 not to ${1/_/ /g} $2"
  end
end

endsnippet

snippet db "double"
double("${1:double_name}"${2:, null_object: true})
$0
endsnippet

snippet mm "mock_model"
mock_model(${1:model})$0
endsnippet

snippet on "once" w
once
endsnippet

snippet reqs "Require spec_helper"
require 'spec_helper'

endsnippet

snippet bef "setup"
before(${1::each}) do
  $0
end
endsnippet

snippet Bef "before {}"
before { $0 }
endsnippet

snippet she "should eql"
${1:target}.should eql(${2:value})
$0
endsnippet

snippet shne "should_not eql"
${1:target}.should_not eql(${2:value})
$0
endsnippet

snippet shnre "should_not_raise"
should_not raise_error(${1:error})
$0
endsnippet

snippet shnr "should_not_receive"
should_not_receive(:${1:message})$0
$0

endsnippet

snippet shre "should_raise"
.should raise_error(${1:error})
$0
endsnippet

snippet shr "should_receive" w
should_receive(:${1:message})$0
endsnippet

snippet wia "should_receive_with_args" w
with(${1})$0
endsnippet

snippet stu "stub"
stub(:${1:message})$0
endsnippet

snippet aft "teardown"
after(${1::each}) do
  $0
end
endsnippet

snippet Aft "after {}"
after { $0 }
endsnippet

snippet tw "twice" w
twice
endsnippet

snippet let "let"
let(:${1:symbol}) { $2 }
endsnippet

snippet let! "let! {}"
let!(:${1:symbol}) { $2 }
endsnippet

snippet letc "let { create ... }"
let(:${1:symbol}) { create $0 }
endsnippet

snippet letc! "let! { create ... }"
let!(:${1:symbol}) { create $0 }
endsnippet

snippet letb "let block"
let :${1:symbol} do
  $2
end
$0
endsnippet

snippet subj "subject"
subject { $1 }
endsnippet

snippet exp "expect to" w
expect(${1:subject}).to $0
endsnippet

snippet expn "expect not to" w
expect(${1:subject}).not_to $0
endsnippet

snippet expb "expect to be" w
expect(${1:subject}).to be_$0
endsnippet

snippet expnb "expect not to be" w
expect(${1:subject}).not_to be_$0
endsnippet

snippet expe "expect to equal" w
expect(${1:subject}).to eql($2)
$0
endsnippet

snippet expne "expect not to equal" w
expect(${1:subject}).not_to eql($2)
$0
endsnippet

snippet expi "expect to include" w
expect(${1:subject}).to include($2)
$0
endsnippet

snippet expni "expect not to include" w
expect(${1:subject}).not_to include($2)
$0
endsnippet

snippet exphc "expect to have content" w
expect(page).to have_content(${1:"content"})
endsnippet

snippet exphe "expect to have elements" w
expect(${1:subject}).to have(${2:3}).${3:elements}
endsnippet

snippet Exp "expect to block"
expect {
  $1
}.to $0
endsnippet

snippet expr "expect to raise error"
expect {
  $1
}.to raise_error(${2:error})
endsnippet

snippet expc "expect to change"
expect {
  $1
}.to change { ${2:subject} }${4:.from($5)}${6:.to($7)}}${8:.by($9)}
endsnippet

snippet fc "FactoryGirl create"
create :${1:factory_name}$0
endsnippet

snippet fb "FactoryGirl build"
build :${1:factory_name}$0
endsnippet

snippet fbs "FactoryGirl build_stubbed"
build_stubbed :${1:factory_name}$0
endsnippet

snippet fcl "FactoryGirl create"
create_list :${1:factory_name}, ${2:2}$0
endsnippet

snippet fbl "FactoryGirl build"
build_list :${1:factory_name}, ${2: 2}$0
endsnippet

snippet fbsl "FactoryGirl build_stubbed"
build_stubbed_list :${1:factory_name}, ${2: 2}$0
endsnippet

# vim:ft=rspec.ruby
