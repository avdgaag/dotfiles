priority -50

global !p
import re
import os

def camelize(str):
	return os.path.splitext(''.join([part.capitalize() for part in str.lower().split('_')]))[0]
endglobal

snippet React "React.createClass" b
var ${1:`!p snip.rv = camelize(fn) or 'ClassName'`} = React.createClass({
	render: function() {
		$0
	}
});
endsnippet

snippet React "React.renderComponent"
React.renderComponent(${1:component}, ${2:document.body});
endsnippet

snippet React "React.renderComponentToString"
React.renderComponentToString(${1:component});
endsnippet

snippet :g "getInitialState" b
getInitialState: function() {
	return { $0 };
},

endsnippet

snippet :g "getDefaultProps" b
getDefaultProps: function() {
	return { $0 };
},

endsnippet

snippet :c "componentWillReceiveProps" b
componentWillReceiveProps: function(newProps) {
	$0
},

endsnippet

snippet :c "componentWillUpdate" b
componentWillUpdate: function(prevProps, prevState) {
	$0
},

endsnippet

snippet :c "componentDidUpdate" b
componentDidUpdate: function(prevProps, prevState) {
	$0
},

endsnippet

snippet :c "componentWillMount" b
componentWillMount: function() {
	$0
},

endsnippet

snippet :c "componentDidMount" b
componentDidMount: function() {
	$0
},

endsnippet

snippet :c "componentWillUnmount" b
componentWillUnmount: function() {
	$0
},

endsnippet

snippet rpt "React.PropTypes" b
React.PropTypes.${1:object}${2:.isRequired}$0
endsnippet

snippet dom "React.DOM"
React.DOM.${1:div}({$2}, $3)
endsnippet

snippet cs "React.addons.classSet"
React.addons.classSet({ $0 });
endsnippet

snippet TestUtils.f "TestUtils.findRenderedDOMComponentWithClass" w
TestUtils.findRenderedDOMComponentWithClass(${1:tree}, ${2:className})
endsnippet

snippet TestUtils.f "TestUtils.findRenderedComponentWithType" w
TestUtils.findRenderedComponentWithType(${1:tree}, ${2:componentClass})
endsnippet

snippet TestUtils.f "TestUtils.findRenderedDOMComponentWithTag" w
TestUtils.findRenderedDOMComponentWithTag(${1:tree}, ${2:tagName})
endsnippet

snippet TestUtils.s "TestUtils.scryRenderedDOMComponentsWithClass" w
TestUtils.scryRenderedDOMComponentsWithClass(${1:tree}, ${2:className})
endsnippet

snippet TestUtils.s "TestUtils.scryRenderedDOMComponentsWithTag" w
TestUtils.scryRenderedDOMComponentsWithTag(${1:tree}, ${2:tagName})
endsnippet

snippet TestUtils.s "TestUtils.scryRenderedComponentsWithType" w
TestUtils.scryRenderedComponentsWithType(${1:tree}, ${2:componentClass})
endsnippet

snippet TestUtils.S "TestUtils.Simulate" w
TestUtils.Simulate.${1:click}(${2:node})
endsnippet

snippet TestUtils.i "TestUtils.isElementOfType" w
TestUtils.isElementOfType(${1:element}, ${2:componentClass})
endsnippet

snippet TestUtils.i "TestUtils.isDOMComponent" w
TestUtils.isDOMComponent(${1:instance})
endsnippet

snippet TestUtils.i "TestUtils.isCompositeComponent" w
TestUtils.isCompositeComponent(${1:instance})
endsnippet

snippet TestUtils.i "TestUtils.isCompositeComponentWithType" w
TestUtils.isCompositeComponentWithType(${1:instance}, ${2:componentClass})
endsnippet

snippet TestUtils.i "TestUtils.isTextComponent" w
TestUtils.isTextComponent(${1:instance})
endsnippet
