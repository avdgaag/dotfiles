extends ruby

snippet exp "expect(obj).to ..." b
expect(${1:object}).${2:to} ${3:eql(${4:value})}
endsnippet

snippet get "get :action, params: { ... }" b
get :${1:new}, params: { $0 }
endsnippet

snippet patch "patch :action, params: { ... }" b
patch :${1:update}, params: { $0 }
endsnippet

snippet post "post :action, params: { ... }" b
post :${1:create}, params: { $0 }
endsnippet

snippet post "post :action, params: { ... }" b
delete :${1:destroy}, params: { $0 }
endsnippet

snippet itrt "it 'renders template' { ... }" b
it "renders ${1:index} template" do
	$0
	expect(response).to render_template('$1')
end
endsnippet

snippet itrd "it 'redirects to' { ... }" b
it "redirects to $1" do
	$0
	expect(response).to redirect_to(${1:model_path})
end
endsnippet

snippet ita "it 'assigns' { ... }" b
it "assigns ${1:post}" do
	$0
	expect(assigns[:$1]).to eql($2)
end
endsnippet

snippet itf "it 'sets flash message' { ... }" b
it "sets flash ${1:notice} message" do
	$0
	expect(flash[:$1]).to be_present
end
endsnippet

snippet iths "it 'returns http status' { ... }" b
it "returns HTTP status ${1:success}" do
	$0
	expect(response).to have_http_status(:$1)
end
endsnippet

snippet it "it { ... }" b
it "${1:subject}" do
	$0
end
endsnippet

snippet con "context" b
context "${1:subject}" do
	$0
end
endsnippet

snippet des "describe" b
describe "${1:subject}" do
	$0
end
endsnippet

snippet create "def create ... end"
def create
	@${1:model_name} = ${2:`!p snip.rv = ''.join(x.capitalize() or '_' for x in t[1].split('_'))`}.new(permitted_attributes($2))
	authorize @$1
	if @$1.save
		redirect_to ${3:@$1}, notice: t('${4:flash.$1.create.success}')
	else
		render 'new'
	end
end
endsnippet

snippet update "def update ... end"
def create
	@${1:model_name} = ${2:`!p snip.rv = ''.join(x.capitalize() or '_' for x in t[1].split('_'))`}.find(params[:id])
	authorize @$1
	if @$1.update(permitted_attributes(@$1))
		redirect_to ${3:@$1}, notice: t('${4:flash.$1.update.success}')
	else
		render 'edit'
	end
end
endsnippet

snippet scope "scope <name>, ->(arg) { ... }" b
scope :${1:name}, ->${2:(${3:args})} { $0 }
endsnippet

snippet ba "before_action <name>" b
before_action :${1:method_name}
endsnippet

snippet classv "class <name> < ActiveModel::EachValidator" b
class ${1:ClassName} < ActiveModel::EachValidator
	def validate(record, attr, value)
		if ${2:condition}
			record.errors.add attr, ${3:msg}
		end
	end
end
endsnippet
